def build_population(N, p):
    """Comenzamos construyendo la función de creación de población (en nuestro editor de texto), luego la probamos en la terminal python3.
    The population consists of N individuals.Each individual has two chromosomes, containing
    allele "A" or "a", with probability p or 1-p, respectively.The population is a list of tuples.
    """
    population = []
    for i in range(N):
        allele1 = "A"
        if scipy.random.rand() > p:
            allele1 = "a"
        allele2 = "A"
        if scipy.random.rand() > p:
            allele2 = "a"
        population.append((allele1, allele2))
    return population

def compute_frequencies(population):
    """ A continuación, construimos la función 2 que calcula las frecuencias de los genotipos. AA, Aa y aA  son los posibles genotipos. Aa y aA difieren según qué alelo se heredó por vía materna o paterna. Las frecuencias son los recuentos de cada genotipo.
    Returns a dictionary of genotypic frequencies.
    """
    AA = population.count(("A", "A"))
    Aa = population.count(("A", "a"))
    aA = population.count(("a", "A"))
    return({"AA": AA, "Aa": Aa, "aA": aA})

def reproduce_population(population):
    """ Esta función 3 acepta la población actual de adultos reproductivos y genera la siguiente generación con el mismo tamaño que la generación anterior.
    Create new generation through reproduction. For each of N new offspring:
    - choose the parents at random, 
    - the offspring receives a chromosome from each of the parents.
    """
    new_generation = []
    N = len(population)
    for i in range(N):
        dad = scipy.random.randint(N)
        mom = scipy.random.randint(N)
        chr_mom = scipy.random.randint(2)
        offspring = (population[mom][chr_mom], population[dad][1 - chr_mom])
        new_generation.append(offspring)
    return new_generation
